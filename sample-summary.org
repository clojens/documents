#+title: Ferret: An Experimental Clojure Compiler
#+tags: clojure c++ arduino avr-gcc gcc
#+STARTUP: hidestars
#+TAGS: noexport(e)
#+EXPORT_EXCLUDE_TAGS: noexport

Ferret is an experimental Lisp to C++ compiler, the idea was to
compile code that is written in a very small subset of Clojure to be
automatically translated to C++ so that I can program stuff in
Clojure where JVM or any other Lisp dialect is not available.

This is a literate program, the code in this document is the
executable source, in order to extract it, open this [[https://github.com/nakkaya/nakkaya.com/tree/master/resources/posts/2011-06-29-ferret-an-experimental-clojure-compiler.org][raw file]]
with emacs and run,

#+begin_example
 M-x org-babel-tangle
#+end_example

It will build the necessary directory structure and export the files
and tests contained.

Disclaimer: This all started because I was bored, there was no planning
and I had no idea what I was doing plus I wrote most of it after
1 am, so it does need some cleanup. Also please don't complain because I
did not use boost this or boost that, my original intention was to use
this on a microcontroller which means there is no boost or standard
C++ library.

* Compiler

Compiler has two major parts, transformation and code
generation. During transformation we make passes over the code, with
each pass code becomes more and more like C++ basically after the final
pass it is C++ written with s-expressions. Then during code generation
we iterate over the code and spit valid C++.

** Transformation

```clojure
#+srcname: core-transformation-form-fns
#+begin_src clojure :tangle no
  (defn morph-form [tree pred f]
    (loop [loc (zip/seq-zip tree)]
      (if (zip/end? loc)
        (zip/root loc)
        (recur
         (zip/next
          (if (pred (zip/node loc))
            (zip/replace loc (f (zip/node loc)))
            loc))))))
  
  (defn remove-form [tree pred]
    (loop [loc (zip/seq-zip tree)]
      (if (zip/end? loc)
        (zip/root loc)
        (recur
         (zip/next
          (if (pred (zip/node loc))
            (zip/remove loc)
            loc))))))
  
  (defn is-form? [& s]
    (fn [f]
      (and (seq? f)
           (some true? (map #(= % (first f)) s)))))
#+end_src
```

During each pass we iterate over the nodes in the form using
/morph-form/ and /remove-form/, they both take a s-expression and a
predicate if the predicate returns true, morph-form will call /f/
passing the current node as an argument and replace that node with
/f/'s return value, remove-form on the other hand does what its name
suggests and removes the node when predicate returns true.

#+srcname: core-transformation-reader-macro
#+begin_src clojure :tangle no
  (defn dispatch-reader-macro [ch fun]
    (let [dm (.get
              (doto (.getDeclaredField clojure.lang.LispReader "dispatchMacros")
                (.setAccessible true))
              nil)]
      (aset dm (int ch) fun)))
  
  (defn native-string [rdr letter-u]
    (loop [s (str )
           p \space
           c (char (.read rdr))]
      (if (and (= c \#) (= p \>))
        s
        (recur (str s p) c (char (.read rdr))))))
  
  (dispatch-reader-macro \< native-string)
  
#+end_src

We install a custom reader macro, what it does is turn
everything between /#</ and />#/ into a string, this makes life so
much easier when you need to embed native code into a function,
otherwise it is a nightmare to indent native code in a string. 

#+srcname: core-transformation-process
#+begin_src clojure :tangle no
  (defn process [form]
    (->> (expand-macros form)
         (add-built-in)
         (expand-macros)
         (vector->list)
         (let->fn)
         (do->fn)
         (closure-conversion)
         (symbol-conversion)
         (vector->list)))
#+end_src
